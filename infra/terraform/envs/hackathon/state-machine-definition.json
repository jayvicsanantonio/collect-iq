{
  "Comment": "CollectIQ Multi-Agent Card Valuation and Authenticity Workflow",
  "StartAt": "RekognitionExtract",
  "States": {
    "RekognitionExtract": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${rekognition_extract_lambda_arn}",
        "Payload": {
          "userId.$": "$.userId",
          "cardId.$": "$.cardId",
          "s3Keys.$": "$.s3Keys",
          "requestId.$": "$.requestId"
        }
      },
      "ResultPath": "$.featureEnvelope",
      "ResultSelector": {
        "Payload.$": "$.Payload"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "ErrorHandler"
        }
      ],
      "Next": "OcrReasoningAgent"
    },
    "OcrReasoningAgent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ocr_reasoning_agent_lambda_arn}",
        "Payload": {
          "userId.$": "$.userId",
          "cardId.$": "$.cardId",
          "features.$": "$.featureEnvelope.Payload.features",
          "requestId.$": "$.requestId"
        }
      },
      "ResultPath": "$.ocrMetadata",
      "ResultSelector": {
        "Payload.$": "$.Payload"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.ocrError",
          "Next": "OcrFallback"
        }
      ],
      "Next": "ParallelAgents"
    },
    "OcrFallback": {
      "Type": "Pass",
      "Comment": "Fallback when OCR reasoning fails - continue with basic OCR data",
      "Result": {
        "cardMetadata": {
          "name": {
            "value": null,
            "confidence": 0.0,
            "rationale": "OCR reasoning agent failed - using fallback"
          },
          "verifiedByAI": false
        }
      },
      "ResultPath": "$.ocrMetadata.Payload",
      "Next": "ParallelAgents"
    },
    "ParallelAgents": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "PricingAgent",
          "States": {
            "PricingAgent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${pricing_agent_lambda_arn}",
                "Payload": {
                  "userId.$": "$.userId",
                  "cardId.$": "$.cardId",
                  "features.$": "$.featureEnvelope.Payload.features",
                  "cardMeta.$": "$.ocrMetadata.Payload.cardMetadata",
                  "requestId.$": "$.requestId"
                }
              },
              "ResultPath": "$.pricingResult",
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.pricingError",
                  "Next": "PricingFallback"
                }
              ],
              "End": true
            },
            "PricingFallback": {
              "Type": "Pass",
              "Result": {
                "status": "error",
                "message": "Pricing agent failed",
                "valueMedian": 0,
                "valueLow": 0,
                "valueHigh": 0,
                "confidence": 0
              },
              "ResultPath": "$.pricingResult.Payload",
              "End": true
            }
          }
        },
        {
          "StartAt": "AuthenticityAgent",
          "States": {
            "AuthenticityAgent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${authenticity_agent_lambda_arn}",
                "Payload": {
                  "userId.$": "$.userId",
                  "cardId.$": "$.cardId",
                  "features.$": "$.featureEnvelope.Payload.features",
                  "cardMeta": {
                    "name.$": "$.ocrMetadata.Payload.cardMetadata.name.value",
                    "set.$": "$.ocrMetadata.Payload.cardMetadata.set.value",
                    "rarity.$": "$.ocrMetadata.Payload.cardMetadata.rarity.value",
                    "frontS3Key.$": "$.s3Keys.front",
                    "ocrMetadata.$": "$.ocrMetadata.Payload.cardMetadata"
                  },
                  "s3Keys.$": "$.s3Keys",
                  "requestId.$": "$.requestId"
                }
              },
              "ResultPath": "$.authenticityResult",
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.authenticityError",
                  "Next": "AuthenticityFallback"
                }
              ],
              "End": true
            },
            "AuthenticityFallback": {
              "Type": "Pass",
              "Result": {
                "status": "error",
                "message": "Authenticity agent failed",
                "authenticityScore": 0.5,
                "confidence": 0,
                "rationale": "Unable to verify authenticity due to processing error"
              },
              "ResultPath": "$.authenticityResult.Payload",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.parallelResults",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "ErrorHandler"
        }
      ],
      "Next": "Aggregator"
    },
    "Aggregator": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${aggregator_lambda_arn}",
        "Payload": {
          "userId.$": "$.userId",
          "cardId.$": "$.cardId",
          "requestId.$": "$.requestId",
          "ocrMetadata.$": "$.ocrMetadata.Payload.cardMetadata",
          "agentResults": [
            {
              "pricingResult.$": "$.parallelResults[0].pricingResult.Payload.pricingResult",
              "valuationSummary.$": "$.parallelResults[0].pricingResult.Payload.valuationSummary",
              "requestId.$": "$.parallelResults[0].pricingResult.Payload.requestId"
            },
            {
              "authenticityResult.$": "$.parallelResults[1].authenticityResult.Payload.authenticityResult",
              "requestId.$": "$.parallelResults[1].authenticityResult.Payload.requestId"
            }
          ],
          "skipCardFetch": true
        }
      },
      "ResultPath": "$.aggregatorResult",
      "ResultSelector": {
        "Payload.$": "$.Payload"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "ErrorHandler"
        }
      ],
      "End": true
    },
    "ErrorHandler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${error_handler_lambda_arn}",
        "Payload": {
          "userId.$": "$.userId",
          "cardId.$": "$.cardId",
          "error.$": "$.error",
          "executionArn.$": "$$.Execution.Id",
          "stateMachineName.$": "$$.StateMachine.Name"
        }
      },
      "ResultPath": "$.errorHandlerResult",
      "End": true
    }
  }
}
